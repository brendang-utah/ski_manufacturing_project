To-Do

fix urls (seperate apis into another page)

consider moving urls under current url file to a new one called api_urls or smthng
- completed by brendan, changed urls to api_urls

need to redo serializers to use read and write


deleted code:
deleted user b/c django has built in user model that simplified auth
old model:
class User(models.Model):
    username = models.CharField(max_length=150, unique=True)
    password = models.CharField(max_length=255)
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    email = models.EmailField(unique=True)
    phone_number = models.CharField(max_length=20, blank=True, null=True)
    address = models.TextField(blank=True, null=True)
    role = models.CharField(max_length=50)

    def __str__(self):
        return self.username



trenton commit tracking:
- removed user and added built in user to model
-reworked employee and customer models 


brendan commit tracking:
- added orders page




I have a new change.
This is a new change.


Your current  ski_manufacturing_project/urls.py has:
path('', include('ski_manufacturing_app.template_urls'))
This means all template URLs are already at the root level, not prefixed with 'products/'.

Your JavaScript in products.html and orders.html makes API calls with specific paths like /api/products/ and /api/orders/.
Your LOGIN_REDIRECT_URL in settings.py is set to '/products/'.
To safely update the template URLs, here's the recommended change:

ski_manufacturing_app
from django.urls import path
from .views import *

urlpatterns = [
    path('', HomepageView.as_view(), name='homepage'),
    path('products/', ProductListPageView.as_view(), name='product-page'),
    path('products/<int:pk>/', ProductDetailView.as_view(), 
The main changes are:

Added the homepage route at root ('/')
Added trailing slashes for consistency
Kept existing URL patterns to maintain compatibility with current frontend code
Before adding new URLs (like OrderCreate and OrderDetail), you should first:

Update the frontend JavaScript to match URL patterns
Test existing functionality
Then gradually add new routes











Created new templates: order-create.html & order-edit.html
These templates include:

Form handling for creating and editing orders
API integration for loading customers and products
Dynamic product entry addition/removal
Basic styling
Error handling
Authentication status display
To use these templates, you'll need to:

Update your views.py to include the corresponding view classes
Add the URLs to your template_urls.py
Ensure your API endpoints support all the required operations